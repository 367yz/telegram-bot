
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ConversationHandler, ContextTypes

ASK_NAME, ASK_PHONE = range(2)

# –¢–æ–∫–µ–Ω —ñ —á–∞—Ç ID –±–µ—Ä—É—Ç—å—Å—è –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data='price')],
        [InlineKeyboardButton("üì© –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", callback_data='apply')]
    ]
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'price':
        if os.path.exists("price_list.pdf"):
            await query.message.reply_document(document=open("price_list.pdf", "rb"))
        else:
            await query.message.reply_text("–§–∞–π–ª –ø—Ä–∞–π—Å—É —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ.")
    elif query.data == 'apply':
        await query.message.reply_text("–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
        return ASK_NAME

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return ASK_PHONE

async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    name = context.user_data['name']
    phone = context.user_data['phone']

    msg = f"üì• –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\nüë§ –Ü–º'—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)
    await update.message.reply_text("–î—è–∫—É—î–º–æ! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—å –∑ –≤–∞–º–∏.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern='apply')],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler, pattern='price'))
    app.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == "__main__":
    main()
